=============
Configuration
=============

Required
========

.. py:data:: SOLUTION_PATTERN

    Regular expression to extract :code:`oj` and :code:`problem` from path to solution. The path is relative to :py:data:`ROOTDIR`.

    For example:

    .. code-block:: python3

        SOLUTION_PATTERN = r'^solutions/(?P<oj>\w+)/(?P<problem>[^/]+)\.c$'

.. py:function:: get_compile_argv(filename)

    To run your solution and check against sample test cases, your solution might have to be compiled first.

    Return :code:`(Arguments, Target)`, where :code:`Arguments` is the arguments of the command to compile your code, and :code:`Target` is the path to generated file.

    Return :code:`None`, if no compilation needed, e.g. script.

    For example,

    .. code-block:: python3

        from ix.utils import replace_ext

        def get_compile_argv(filename):
            target = replace_ext(filename, "elf")
            return ['gcc', '-o', target, filename], target


.. py:function:: prepare_submission(envs, filename)

    Online judges provide different environment s to support different languages and compilers. You have to choose one of them before submit. :code:`Env` is a namedtuple with 6 fields.

    .. code-block:: python3

        Env = namedtuple('Env', ['name','ver','os','arch','lang','lang_ver'])

    And here is an example of :code:`Env`

    .. code-block:: python3

        Env(name="GCC", ver="5.1", os="Linux", arch="x86", lang="C", lang_ver="C11")

    return :code:`(Env, Code)`, where :code:`Env` is the chosen environment, :code:`Code` is code to be submitted.

    return :code:`None`, if no suitable environment found

    For example,

    .. code-block:: python3

        def prepare_submission(envs, filename):
            envs = [c for c in envs
                    if c.lang == 'C' and c.name in ('MinGW', 'GCC')]
            if not envs:
                return None
            with open(filename,'r') as f:
                code = f.read()
            return envs[0], code

    If language of the chosen environment is C and type of :code:`Code` is :code:`bytes` instead of :code:`str`, :code:`Code` will be preprocessed before submit, and :code:`Code` must be assembly code instead of C. First, all the labels which are not exported will be renamed. And then, :code:`Code` will be compressed and properly escaped and put between :code:`__asm__()`.

    For example, the C source code of solution to POJ-1000

    .. code-block:: c

        #include <stdio.h>

        int main(){
          int a, b;
          scanf("%d %d", &a, &b);
          printf("%d\n", a+b);
          return 0;
        }

    And here is the assembly code generated by clang

    .. code-block:: asm

        	.text
        	.def	 @feat.00;
        	.scl	3;
        	.type	0;
        	.endef
        	.globl	@feat.00
        @feat.00 = 1
        	.def	 _main;
        	.scl	2;
        	.type	32;
        	.endef
        	.globl	_main
        _main:                                  # @main
        # BB#0:
        	pushl	%ebp
        	movl	%esp, %ebp
        	pushl	%edi
        	pushl	%esi
        	subl	$8, %esp
        	calll	___main
        	leal	-12(%ebp), %esi
        	leal	-16(%ebp), %edi
        	pushl	%esi
        	pushl	%edi
        	pushl	$L_.str
        	calll	_scanf
        	addl	$12, %esp
        	movl	(%esi), %eax
        	addl	(%edi), %eax
        	pushl	%eax
        	pushl	$L_.str.1
        	calll	_printf
        	addl	$8, %esp
        	xorl	%eax, %eax
        	addl	$8, %esp
        	popl	%esi
        	popl	%edi
        	popl	%ebp
        	retl

        	.section	.rdata,"dr"
        L_.str:                                 # @.str
        	.asciz	"%d %d"

        L_.str.1:                               # @.str.1
        	.asciz	"%d\n"


    And after being preprocessed by ix, the assembly code is converted to C code

    .. code-block:: c

        #define _ "pushl\t%e"
        #define b "\n\tcalll\t_"
        #define a "\n\taddl\t$"
        #define d "endef\n\t.globl\t"
        #define c ":\n\t.asciz\t\"%d"
        __asm__("\t.text\n\t.def\t @feat.00;\n\t.scl\t3;\n\t.type\t0;\n\t."d"@feat.00\n@feat.00 = 1\n\t.def\t _main;\n\t.scl\t2;\n\t.type\t32;\n\t."d"_main\n_main:\n\t"_"bp\n\tmovl\t%esp, %ebp\n\t"_"di\n\t"_"si\n\tsubl\t$8, %esp"b"__main\n\tleal\t-12(%ebp), %esi\n\tleal\t-16(%ebp), %edi\n\t"_"si\n\t"_"di\n\tpushl\t$L_"b"scanf"a"12, %esp\n\tmovl\t(%esi), %eax\n\taddl\t(%edi), %eax\n\tpushl\t%eax\n\tpushl\t$L_.1"b"printf"a"8, %esp\n\txorl\t%eax, %eax"a"8, %esp\n\tpopl\t%esi\n\tpopl\t%edi\n\tpopl\t%ebp\n\tretl\n\t.section\t.rdata,\"dr\"\nL_"c" %d\"\n\nL_.1"c"\\n\"\n\n\n");


Optional
========

.. py:data:: ROOTDIR

    Root directory of all files. By default, it is set to current working directory, you may override this in your configuration, and default :py:data:`SOLUTIONS_DIR` and :py:data:`TESTCASES_DIR` will change accordingly.

.. py:data:: SOLUTIONS_DIR

    Root directory of all solutions. By default, it is set to :code:`${ROOTDIR}/solutions`

.. py:data:: TESTCASES_DIR

    Root directory of all fetched sample test cases. By default, it is set to :code:`${ROOTDIR}/testcases`


.. py:data:: VERBOSE

    Whether or not to print verbose output

    By default, this is set to :code:`True` if environment variable :code:`VERBOSE` is set to :code:`true`, :code:`on` or :code:`1`.

    This could be override by command line options


.. py:data:: NO_ASK

    Do not ask for password, if this is set to :code:`True`

    By default, this is set to :code:`True` if environment variable :code:`NO_ASK` is set to :code:`true`, :code:`on` or :code:`1`.

    This could be override by command line options


.. py:data:: LOGIN_MAX_RETRY

    Max times of retry, when login failed.

    By default, it is set to :code:`2`


.. py:function:: has_to_recompile(source, target)

    Check if compilation needed.

    By default, it is set to

    .. code-block:: python3

        import os, os.path

        def has_to_recompile(source, target):
            if not os.path.exists(target):
                return True
            elif os.stat(source).st_mtime >= os.stat(target).st_mtime:
                return True
            return False


.. py:function:: get_run_argv(filename)

    Arguments to run executable

    By default, it is set to

    .. code-block:: python3

        def get_run_argv(filename):
            return [filename]


.. py:function:: list_generated_files(filename)

    Return a list of files related to a solution, they will be removed when running clean

    For example,

    .. code-block:: python3

        from ix.utils import replace_ext

        def list_generated_files(filename):
            return [replace_ext(filename, ".elf")]


.. py:function:: default_testcase_prefix(oj, problem)

    Return prefix of filename of test case. Filename of inputs would be :code:`${prefix}.in(.${n})`, filename of outputs would be :code:`${prefix}.out(.${n})`.

    By default, it is set to

    .. code-block:: python3

        import os.path

        def default_testcase_prefix(oj, problem):
            return os.path.join(oj, problem)

.. py:data:: testcase_prefixes

    You may want a different prefix of test case for some online judges.

    By default this is set to :code:`{}`

    For example,

    .. code-block:: python3

        import os.path

        testcase_prefixes = {
            "HR": lambda problem: os.path.join("HR", problem)}


.. py:data:: CREDENTIAL_READER

    how to read password when not logged in

    By default, it is set to :code:`ix.credential.readers.readline.ReadlineCredentialReader()`

    And :code:`ix.credential.readers.env.EnvironmentCredentialReader` is recommended when running in Continuous Integration environment, For example, environment variables :code:`POJ_user_id1`, :code:`POJ_password1` are required to submit code to POJ.

    .. code-block:: python3

        USER = "user_id1"
        PASS = "password1"

        CREDENTIAL_INPUT_TITLE = "POJ (poj.org)"
        CREDENTIAL_INPUT_FIELDS = (
            (USER, "User ID", False),
            (PASS, "Password", True),
        )


.. py:data:: CREDENTIAL_STORAGE

    where to store credentials

    By default, it is set to :code:`ix.credential.storages.sqlite.SqliteCredentialStorage(os.path.join(ROOTDIR, "credentials.sqlite"))`



Helper functions
================

.. py:function:: ix.utils.index_of(l,x)

    .. code-block:: pycon

        >>> from ix.utils import index_of
        >>> index_of([2,1,2],1)
        1
        >>> index_of([2,1,2],3)
        3

.. py:function:: ix.utils.replace_ext(filename, ext)

    .. code-block:: pycon

        >>> from ix.utils import replace_ext
        >>> replace_ext("a.c","elf")
        'a.elf'
